import argparse
from subprocess import Popen, PIPE
import sys
import re
#import numpy as np


RgFlagCat = re.compile('^\[ [a-z]+ \]')
RgFlagDefault = re.compile('\[ defaults \]')
RgFlagAtomType = re.compile('\[ atomtypes \]')
#path for gromacs
gmx="/usr/local/gromacs/bin/gmx"
#path for the force field
leap="/amber18/dat/leap/cmd/oldff/leaprc.ff96"
acpype="/home/REMD/src/acpype.py"


def ReadTopFile(Filename) :
	"""
	Read a gromacs top file and add or delete informations.
	FROM MAUD jusot
	"""
	Flag = 0
	newFile = ''
	with open(Filename, 'r') as filin :
		for li in filin :
			if RgFlagCat.search(li) :
				if RgFlagDefault.search(li) or RgFlagAtomType.search(li) :
					Flag = 1
				else :
					Flag = 0
			if Flag == 0 :
				newFile += li
			elif Flag == 1 :
				newFile += ';' 
				newFile += li
			else :
				print "Error in Flag"
	return newFile


def WriteNewFile(Filename, newFile, forceField="96") :
	"""
	Write a new file readable for gromacs.
	From MAUD jusot
	"""
	with open(Filename.replace(".top", "_corrected.top"),'w') as filout :
		filout.write(';force field\n#include "amber')
		filout.write(str(forceField))
		filout.write('.ff/forcefield.itp"\n\n')
		filout.write(newFile)


def Regex4topol(line, topfile):
	"""
	Modify order atoms to correct improper dihedral
	"""
	AtomID = {}
	atomName = line.split(";")[1]
	atomNumber = line.split(";")[0]
	for i in xrange(len(atomName.split())):
		AtomID[atomName.split()[i]] = atomNumber.split()[i]
	if line.split(";")[1].split()[0][0] == "N":
		#Modifiy initial order of N-    CA-     C-     O to CA-     N-     C-     O
		newline = '{0:>6} {1:>6} {2:>6} {3:>6}'.format(AtomID["CA-"], AtomID["N-"], AtomID["C-"],AtomID["O"])
	elif line.split(";")[1].split()[0][0] == "H":
		#Modifiy initial order of H-     N-     C-    CA to C-    CA     N-     H
		newline = '{0:>6} {1:>6} {2:>6} {3:>6}'.format(AtomID["C-"], AtomID["CA"], AtomID["N-"],AtomID["H-"])
	else:
		print "Regex not found !\nPlease send a email with your PDB file"
		sys.exit(0)
	newline = newline+line[27:]
	cmd = "sed -i \"s/"+line[:-1]+"/"+newline[:-1]+"/\" "+topfile
	Popen(cmd, shell=True).wait()


def CorrectDihedral(topfile):
	"""
	Amber define a wrong improper dihedral (the fisrt one)
	The function modify topology file to correct it
	Argument:
		_topfile: GROMACS topology generated by acpype (from amber topology)
	"""
	flag = False
	cpt = 0
	with open(topfile, "r") as filin:
		for line in filin:
			if line[:-1] == "[ dihedrals ] ; impropers":
				flag = True
				continue
			elif flag is True and line[0] == ";":
				continue
			elif flag is True and line[0] != ";":
				print line
				tmp = line
				cpt += 1
				Regex4topol(line, topfile)
				if cpt > 1:
					flag = False

def MakeTopology(structure, peptide, gmx=gmx, tleap=leap, forcefield="amber96"):
    """
    Generate topopoly files for gromacs from intial structure
    Arguments:
        _structure: PDB file
        _peptide: Flag to specify if the peptide is cyclic or not
        _gmx: path for gromacs
        _tleap: path for leap
    Return:
        peptide.gro: structure file
        peptide.top: topology file
    """
    if peptide == "no":
        print "No cyclic peptide"
        cmd = gmx+" pdb2gmx -p peptide.top -ignh yes -ff "+forcefield+" -water none\
     -o peptide.gro -f "+structure
        Popen(cmd, shell=True).wait()
    else:
        print "Cyclic peptide"
        #First step we remove hhydrogen
        Popen("grep -v 'H' "+structure+" > pept-H.pdb", shell=True).wait()
        #Atoms's number beging at 1
        Popen(gmx+" editconf -f pept-H.pdb -o pept-good.pdb -resnr 1", shell=True).wait()
        p1= Popen("grep 'CA' pept-good.pdb | tail -n 1", stdout=PIPE, shell=True)
        output = p1.communicate()
        residue = output[0][22:26]
        #Create leap script to generate amber topology files
        #gromacs can not make correct topology file for cyclic peptide)
        print("generate script for amber")
        with open("script.leap", "w") as filin:
            filin.write("source "+leap)
            filin.write("\nset default PBradii bondi")
            filin.write("\nclearpdbresmap")
            filin.write("\nmol = loadpdb pept-good.pdb")
            print "\nbond mol.1.N mol."+residue.strip(" ")+".C"
            filin.write("\nbond mol.1.N mol."+residue.strip(" ")+".C")
            filin.write("\nsaveamberparm mol pept_amber.prmtop pept_amber.inpcrd")
            filin.write("\nsavepdb mol pept_amber.pdb")
            filin.write("\nquit")
        print("generate amber's topology")
        Popen("tleap -f script.leap", shell=True).wait()
        #delete unacessary files
        Popen("rm ./pept-H.pdb ./pept-good.pdb ./pept_amber.pdb", shell=True).wait()
        Popen(acpype+" -x pept_amber.inpcrd -p pept_amber.prmtop", shell=True).wait()
        NewFile = ReadTopFile("pept_amber_GMX.top")
        WriteNewFile("pept_amber_GMX.top", NewFile)
        Popen("rm ./pept_amber.inpcrd ./pept_amber.prmtop ./pept_amber_GMX.top", shell=True).wait()
        CorrectDihedral("pept_amber_GMX_corrected.top")
        Popen("mv pept_amber_GMX.gro peptide.gro", shell=True).wait()
        Popen("mv pept_amber_GMX_corrected.top peptide.top", shell=True).wait()
    return "peptide.gro", "peptide.top"




parser = argparse.ArgumentParser(description='topology fie (GRO,PDB)')
parser.add_argument('-g', action="store", dest="g", type=str, help="pdb file")
parser.add_argument('-p', action="store", dest="p", type=str, default = None, help="topology file")
parser.add_argument('-cyclic', action="store", dest="cyclic",default="no", type=str, help="flag for cyclic peptide")
parser.add_argument('-temperature', action="store", dest="temp",default=None, type=str, help="\"300 313 329 347 367 391 418 450\"")
parser.add_argument('-log', action="store", dest="log", type=str,\
 default = "clust.log", help="log file's name: default clust.log")
parser.add_argument('-o', action="store", dest="o", type=str, default = "./",\
help="output path filename ")
arg = parser.parse_args()


if arg.g[-3:] != "pdb":
	print "please provide a PDB file"
	sys.exit(0)
if arg.p is None:
	pdb, topology = MakeTopology("RGDpV.pdb", "yes", gmx, leap)
else:
	pdb = arg.g
	topology = arg.p

if arg.temp is None:
	print "No temperature given...\n"
	print "Final files:\nTopology: {0}\nStructure: {1}\n".format(topology, pdb)
	sys.exit(0)
#refTemp = np.fromstring(arg.temp, dtype=float, sep=' ')
refTemp = arg.temp.split()
#####Realisation de la minimisation
print "Minimization"
Popen("rm -rf ./mini1 ./mini2 ./REMD *#", shell=True).wait()
Popen("mkdir mini1 mini2 REMD", shell=True).wait()
Popen("cp *.itp *.top *.gro "+pdb+" ./mini1", shell=True).wait()
Popen("cp ../src/minim_good.mdp ./mini1", shell=True).wait()
Popen("cp ../src/Equil.mdp ./mini2", shell=True).wait()
Popen(gmx+" editconf -f ./mini1/"+pdb+" -o ./mini1/center_mini_systeme.gro  -bt cubic -d 1.0 -c yes", shell=True).wait()
Popen(gmx+" grompp -f ./mini1/minim_good.mdp -p ./mini1/"+topology+" -c ./mini1/center_mini_systeme.gro -o ./mini1/mini1.tpr", shell=True).wait()
Popen(gmx+" mdrun -deffnm ./mini1/mini1", shell=True).wait()

Popen("cp ./mini1/mini1.gro ./mini2/mini1.gro", shell=True).wait()
Popen("cp ./mini1/"+topology+" ./mini2/"+topology, shell=True).wait()
for i in xrange(len(refTemp)):
	Popen("sed \"s|ref_t = 300 ; .*|ref_t = "+str(refTemp[i])+" ;|\" ./mini2/Equil.mdp>./mini2/Equil_"+str(i)+".mdp", shell=True).wait()
	Popen(gmx+" grompp -f ./mini2/Equil_"+str(i)+".mdp -c ./mini2/mini1.gro -p ./mini2/"+topology+" -o ./mini2/Equil_"+str(i)+".tpr", shell=True).wait()
	Popen(gmx+" mdrun -v -deffnm ./mini2/Equil_"+str(i), shell=True).wait()



